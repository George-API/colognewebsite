// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // Enable for better serverless performance
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for migrations
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Optional for OAuth
  image         String?   // For OAuth profile pictures
  emailVerified DateTime?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// @validation: price >= 0
// @validation: stock >= 0
model Product {
  id            String    @id @default(cuid())
  name          String
  brand         String
  description   String    @db.Text
  price         Float     @db.DoublePrecision  // Using DoublePrecision for more accurate pricing
  size          String    // e.g., "50ml", "100ml"
  stock         Int       @default(0)
  mainImage     String    // Main product image
  imageGallery  String[]  // Additional images (keep limited)
  category      String
  featured      Boolean   @default(false)
  reviews       Review[]
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([category])
  @@index([featured])
}

// @validation: total >= 0
model Order {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Float         @db.DoublePrecision
  tax             Float?        @db.DoublePrecision
  shipping        Float?        @db.DoublePrecision
  total           Float         @db.DoublePrecision
  shippingAddress String
  paymentIntentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId, status])
  @@index([paymentStatus])
}

// @validation: quantity > 0
// @validation: price >= 0
model OrderItem {
  id          String    @id @default(cuid())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  price       Float     @db.DoublePrecision

  @@index([orderId])
  @@index([productId])
}

// @validation: rating >= 1 AND rating <= 5
model Review {
  id          String    @id @default(cuid())
  rating      Int       @db.SmallInt
  comment     String?   @db.Text
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
